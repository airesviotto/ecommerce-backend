generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  token String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  addresses UserAddress[]
  order Order[]
}

model UserAddress {
  id Int @id @default(autoincrement())
  user_id Int
  zipcode String
  street String
  number String
  city String
  state String
  country String
  complement String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [user_id], references: [id])
}

model Banner {
  id Int @id @default(autoincrement())
  img String
  link String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

}

model Product {
  id Int @id @default(autoincrement())
  label String
  price Float
  description String?
  category_id Int
  viewsCount Int @default(0)
  salesCount Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  images ProductImage[]
  product_metadata ProductMetadata[]
  category Category @relation(fields: [category_id], references: [id])
  order_product OrderProduct[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  product_id Int
  url String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  product Product @relation(fields: [product_id], references: [id])
}

model ProductMetadata {
  id Int @id @default(autoincrement())
  product_id Int
  categoryMetadata_id String
  metadataValue_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  product Product @relation(fields: [product_id], references: [id])
}

model Category {
  id Int @id @default(autoincrement())
  slug String @unique
  name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  products Product[]
  category_metadata CategoryMetadata[]
}

model CategoryMetadata {
  id String @id
  name String
  category_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  category Category @relation(fields: [category_id], references: [id])
  metadata_values MetadataValue[]
}

model MetadataValue {
  id String @id
  label String
  categoryMetadata_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  category_metadata CategoryMetadata @relation(fields: [categoryMetadata_id], references: [id])
}

model Order {
  id Int @id @default(autoincrement())
  user_id Int
  status String @default("pending")
  total Float
  shippingCost Float @default(0)
  shippingDays Int @default(0)
  shippingZipcode String?
  shippingStreet String?
  shippingNumber String?
  shippingCity String?
  shippingState String?
  shippingCountry String?
  shippingComplement String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [user_id], references: [id])
  order_product OrderProduct[]

}

model OrderProduct {
  id Int @id @default(autoincrement())
  order_id Int
  product_id Int
  quantity Int @default(1)
  price Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}